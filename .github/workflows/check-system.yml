name: Test Smart Repositor

on:
  schedule:
    - cron: '*/30 * * * *' # Ejecutar cada 30 minutos
  workflow_dispatch: # Permitir ejecución manual

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Clonar el repositorio
      - uses: actions/checkout@v3

      # Paso 2: Configurar Node.js
      - uses: actions/setup-node@v3
        with:
          node-version: '18' # Versión compatible con Playwright

      # Paso 3: Instalar Playwright
      - run: npm install playwright

      # Paso 4: Ejecutar pruebas con Playwright
      - name: Run tests with Playwright
        id: tests
        run: |
          xvfb-run -a npx playwright install
          xvfb-run -a node tests/test-web.js
        continue-on-error: true

      # Paso 5: Actualizar el contenido de status.json
      - name: Update Status JSON
        if: always() # Este paso siempre se ejecuta
        run: |
          > status.json # Vaciar el archivo
          if [ "${{ steps.tests.outcome }}" == "success" ]; then
            echo '{"schemaVersion": 1, "label": "Estado del servicio", "message": "Online", "color": "brightgreen"}' > status.json
          else
            echo '{"schemaVersion": 1, "label": "Estado del servicio", "message": "Offline", "color": "red"}' > status.json
          fi

      # Paso 6: Subir status.json a gh-pages
      - name: Push Status to gh-pages
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git checkout -b gh-pages || git checkout gh-pages
          git add status.json
          git commit -m "Actualización de estado del sistema" || echo "No hay cambios para commitear."
          git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} gh-pages --force
